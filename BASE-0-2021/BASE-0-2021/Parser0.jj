PARSER_BEGIN(Parser0)

import java.util.List;
import java.util.ArrayList;

/** ID lister. */
public class Parser0 {

  /** Main entry point.
  public static void main(String args[]) {

      // if has an argument --> compiler


      // if has no agurments --> interpreter

    Parser0 parser = new Parser0(System.in);
    ICLInterpreter interpreter = new ICLInterpreter();
    interpreter.run(parser);


  }*/



}



PARSER_END(Parser0)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < MUL : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < DEF: "def" >
  |
  < IN : "in">
  |
  < END : "end">
  |
  < EQUALS : "=">
  |
  < DSEMI : ";;" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >

}

ASTNode Start() :
{
ASTNode t1;
}
{ (
    t1 = Exp() <DSEMI>
    | < EOF > { t1 = null; }
)
	{ return t1; }
}

ASTNode Exp() :
{
ASTNode t1,t2;
Token tok;
}
{
     t1 = Term() ( ( tok=<PLUS> | tok=<MINUS>) t2=Term()

                 { if (tok.kind == PLUS)
                         t1 = new ASTAdd(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 }

                 )*

    
     { return t1; }

}

ASTNode Term() :
{
ASTNode t1,t2;
Token token;
}
{
     t1=Fact() (( token=<MUL> | token =<DIV> ) t2=Fact()
      {if(token.kind == MUL)
        t1 = new ASTMul(t1,t2);
        else t1 = new ASTDiv(t1,t2);
      }
      ) *

     { return t1; }
	
}

ASTNode Fact() :
{ ASTNode t1, t2;
 Token tok;
 List<Bind> binds = new ArrayList<Bind>();
 String id; }
{
   ( tok=<Num> { t1 = new ASTNum(Integer.parseInt(tok.image)); }
   | <LPAR> t1=Exp() <RPAR>
   | <MINUS> {t1 = new ASTMinus(Fact());}
   | < DEF > (tok = <Id> { id = tok.image;} <EQUALS> {t2 = Exp(); binds.add(new Bind(id, t2)); })+ <IN> { t1 = new ASTDef(binds, Exp());} <END>
   | tok = <Id> { t1 = new ASTId(tok.image);}
   )   
  { return t1; }
}
